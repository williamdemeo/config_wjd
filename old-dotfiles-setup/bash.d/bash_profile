# .bash_profile file
# By Balaji S. Srinivasan (balajis@stanford.edu)
#
# Concepts:
# http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html
#
#    1) .bashrc is the *non-login* config for bash, run in scripts and after
#        first connection.
#
#    2) .bash_profile is the *login* config for bash, launched upon first
#        connection (in Ubuntu)
#
#    3) .bash_profile imports .bashrc in our script, but not vice versa.
#
#    4) .bashrc imports .bashrc_custom in our script, which can be used to
#        override variables specified here.
#
# When using GNU screen:
#
#    1) .bash_profile is loaded the first time you login, and should be used
#       only for paths and environmental settings
#
#    2) .bashrc is loaded in each subsequent screen, and should be used for
#       aliases and things like writing to .bash_eternal_history (see below)
#
# Do 'man bashrc' for the long version or see here:
# http://en.wikipedia.org/wiki/Bash#Startup_scripts
#
# When Bash starts, it executes the commands in a variety of different scripts.
#
#   1) When Bash is invoked as an interactive login shell, it first reads
#      and executes commands from the file /etc/profile, if that file
#      exists. After reading that file, it looks for ~/.bash_profile,
#      ~/.bash_login, and ~/.profile, in that order, and reads and executes
#      commands from the first one that exists and is readable.
#
#   2) When a login shell exits, Bash reads and executes commands from the
#      file ~/.bash_logout, if it exists.
#
#   3) When an interactive shell that is not a login shell is started
#      (e.g. a GNU screen session), Bash reads and executes commands from
#      ~/.bashrc, if that file exists. This may be inhibited by using the
#      --norc option. The --rcfile file option will force Bash to read and
#      execute commands from file instead of ~/.bashrc.

## -----------------------
## -- 1) Import .bashrc --
## -----------------------

# Factor out all repeated profile initialization into .bashrc
#  - All non-login shell parameters go there
#  - All declarations repeated for each screen session go there
if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi

# Set some ENV variables
export JAVA_HOME="$(jrunscript -e 'java.lang.System.out.println(java.lang.System.getProperty("java.home"));')"
export SPARK_HOME=/opt/spark-3.2.0
# export PYSPARK_PYTHON=/usr/bin/python3

# Configure PATH
#  - These are line by line so that you can kill one without affecting the others.
#  - Highest priority first, lowest priority last.
#
# PATH will include the following directories:
# (you can add directories to this list as needed)
#
PATHDIRS="/usr/bin
$HOME/opt/SCALA/scala-2.13.3/bin
$HOME/opt/SPARK/spark-3.1.2-bin-hadoop3.2/bin
$HOME/.cabal/bin
$HOME/.local/bin
$HOME/.local/share/coursier/bin
$HOME/bin
$HOME/gems/bin
$HOME/.nvm/versions/node/v14.13.0/bin
$HOME/.opam/4.08.0/bin
$HOME/.texlive2021/bin/x86_64-linux
/usr/local/sbin
/usr/sbin
/usr/local/bin
/usr/bin
/sbin
/bin
/usr/local/games
/usr/games
/snap/bin"


for f in $PATHDIRS; do
  if [ -d $f ]; then
	  PATH=${f}:$PATH
  fi
done

# opam configuration
test -r $HOME/.opam/opam-init/init.sh && . $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true



# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/williamdemeo/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/williamdemeo/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/williamdemeo/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/williamdemeo/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<





export PATH="$HOME/.elan/bin:$PATH"
